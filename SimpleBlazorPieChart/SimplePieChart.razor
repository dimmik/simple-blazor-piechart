@using ColorSequenceGenerator
<table>
    <tr>
        <td style="width: @Width; height: @Height; padding: 5px; vertical-align: top;">
            <div style="
        border-radius: 100%;
        width: 100%;
        aspect-ratio: 1;
        background: conic-gradient(@(string.Join(", ",
                GetFromTo(AnglesColorsAndNames.Select(acn => acn.Item1)) // (0, 800), (800, 1700), (1700, 9500) ...
                .Zip(AnglesColorsAndNames)
                .Select(acn => new {Color=acn.Second.Item2, FromDeg=acn.First.Item1, ToDeg=acn.First.Item2})
                .Select(acn => $"{acn.Color} {(acn.FromDeg * 1.0 / 100).ToString("0000.00", nfi)}deg {(acn.ToDeg * 1.0 / 100).ToString("0000.00", nfi)}deg")))
            );
    "></div>

        </td>
        @if (ShowText)
        {
            <td style="padding: 5px; font-size: x-small; vertical-align:top;">
                @foreach (var acn in AnglesColorsAndNames)
                {
                    var nm = acn.Item3;
                    var color = acn.Item2;
                    var perc = acn.Item1 * 100.0 / 36000;
                    <div>
                        <span style="width:7px;background-color:@color">&nbsp;&nbsp;&nbsp;</span><b>&nbsp;@nm</b> 
                        @($"{perc:0.0}%")
                        @if (ShowAbsoluteNumbers)
                        {
                            <b>&nbsp;[@(AbsoluteNumbers.ContainsKey(nm) ? AbsoluteNumbers[nm].ToString("N0", nf) : -1)]</b>
                        }
                    </div>
                }
                @if (ShowAbsoluteNumbers)
                {
                    <div>Total: <b>@AbsoluteNumbers.Values.Sum().ToString("N0", nf)</b></div>
                }
                @if (ShowSubcategories && ThereAreSubcatsAtAll)
                {
                    <span style="cursor:pointer" @onclick=@(() => {AggregateCats = !AggregateCats; UpdateColors();})>
                        <u>@(AggregateCats ? "Show" : "Hide") details</u>
                    </span>
                }
            </td>
        }
    </tr>
    @if (ExtraControls is not null && RenderExtraControls)
    {
        <tr>
            <td colspan="@(ShowText ? "2" : "1")">
                @ExtraControls(ColorSequenceGenerator)
            </td>
        </tr>
    }

</table>
@code {
    [Parameter]
    public IEnumerable<(string name, int amount)> Data { get; set; } = new List<(string, int)>();

    [Parameter]
    public IColorSequenceGenerator ColorSequenceGenerator { get; set; } = new CSG();

    [Parameter]
    public RenderFragment<IColorSequenceGenerator> ExtraControls { get; set; }

    [Parameter]
    public bool ShowText { get; set; } = true;

    [Parameter]
    public bool ShowAbsoluteNumbers { get; set; } = false;
    private Dictionary<string, int> AbsoluteNumbers = new();
    private System.Globalization.NumberFormatInfo nf = new() { NumberGroupSeparator = " " };

    [Parameter]
    public bool ShowSubcategories { get; set; } = false;

    [Parameter]
    public string SubcatDelim { get; set; } = "/";

    [Parameter]
    public string SubcatMoreSign { get; set; } = " [+]";

    [Parameter]
    public string Width { get; set; } = "160px";
    private string Height => Width; // aspect ratio = 1

    [Parameter]
    public bool RenderExtraControls { get; set; } = true;

    static System.Globalization.NumberFormatInfo nfi = new() { NumberDecimalSeparator = "." };

    private List<(int, string, string)> AnglesColorsAndNames { get; set; } = new();
    protected override void OnParametersSet()
    {
        AggregateCats = ShowSubcategories;
        UpdateColors();
    }
    private void UpdateColors()
    {
        AnglesColorsAndNames = GetAnglesColorsAndNames().ToList();
    }
    private IEnumerable<string> Colors()
    {
        return ColorSequenceGenerator.ColorSequence().Select(c => c.ToString());
    }
    public IEnumerable<(int, int)> GetFromTo(IEnumerable<int> seq)
    {
        int i = 0;
        foreach (var s in seq)
        {
            yield return (i, i + s);
            i = i + s;
        }
    }
    private bool AggregateCats;
    private bool ThereAreSubcatsAtAll = false;
    private IEnumerable<(string name, int amount)> GetData()
    {
        var data = Data;
        if (!data.Any()) return new[] { ("n/a", 0) };
        //Console.WriteLine($"Aggr: {AggregateCats}");
        if (AggregateCats)
        {
            data = data
                .Select(d => (d.name.Split(SubcatDelim).Select(n => n.Trim()).ToArray()[0], d.amount, d)) // ("a / b", 10), ("a /c", 20) => ("a", 10), (a, 20)
                .ToLookup(k => k.Item1)
                .ToDictionary(k => k.Count() > 1 ?  $"{k.Key}{SubcatMoreSign}" : k.First().d.name, v => v.Select(vv => vv.amount).Sum())
                .Select(kv => (kv.Key, kv.Value))
                ;
            ThereAreSubcatsAtAll = data.Count() < Data.Count();
            if (!ThereAreSubcatsAtAll)
            {
                data = Data;
            }
        }
        if (ShowAbsoluteNumbers)
        {
            AbsoluteNumbers = data.ToDictionary(k => k.name, v => v.amount);
        }
        return data;
    }

    private IEnumerable<(int, string, string)> GetAnglesColorsAndNames()
    {
        var data = GetData();
        var total = data.Select(i => Math.Abs(i.amount)).Sum();
        if (total == 0){ // all zeroes.
            data = data.Select(d => ($"{d.name} [=0]", 1));
            total = data.Select(i => Math.Abs(i.amount)).Sum();
        }
        var a = data
            .Select(i => (int)((Math.Abs(i.amount) * 36000.0 / total)))
            .ToList();
        if (a.Sum() < 36000)
        {
            if (a.Any())
            {
                a[a.IndexOf(a.Max())] = a.Max() + (36000 - a.Sum());
            }
            else
            {
//                Console.WriteLine($"({guid}) Hmm... No elements?.. {a.Count} Magic...");
            }
        }

        var res = a
        .Zip(data.Select(i => i.name))
        .OrderByDescending(i => i.First)
        .Zip(Colors().Take(a.Count()))
        .Select(i => (i.First.First, i.Second, i.First.Second)) // (angle, color, name)
        ;
        return res;
    }
}
